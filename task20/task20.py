# В настольной игре Скрабл (Scrabble) каждая буква имеет определенную ценность. В случае с английским алфавитом очки распределяются так:  
# ● A, E, I, O, U, L, N, S, T, R – 1 очко;  
# ● D, G – 2 очка;  
# ● B, C, M, P – 3 очка;  
# ● F, H, V, W, Y – 4 очка;  
# ● K – 5 очков;  
# ● J, X – 8 очков;  
# ● Q, Z – 10 очков.  
# А русские буквы оцениваются так:  
# ● А, В, Е, И, Н, О, Р, С, Т – 1 очко;  
# ● Д, К, Л, М, П, У – 2 очка;  
# ● Б, Г, Ё, Ь, Я – 3 очка;  
# ● Й, Ы – 4 очка;  
# ● Ж, З, Х, Ц, Ч – 5 очков;  
# ● Ш, Э, Ю – 8 очков;  
# ● Ф, Щ, Ъ – 10 очков.  
# Напишите программу, которая вычисляет стоимость введенного пользователем слова. Будем считать, что на вход подается только одно слово, которое содержит либо только английские, либо только русские буквы.

# Комментарий - словарь задается статически
# На вход пользователь может подать любое сочетание русских или английских бувк. Писать обработчик ошибок и проверок существования слов,
# а также принудительный выбор раскладки в рамках текущей задачи и курса - не имеет смысла. 

import os
os.system('cls')

scrabble = {1: 'AEIOULNSTRАВЕИНОРСТ', 2: 'DGДКЛМПУ', 3: 'BCMPБГЁЬЯ', 4: 'FHVWYЙЫ', 
            5: 'KЖЗХЦЧ', 8: 'JXШЭЮ', 10: 'QZФЩЪ'}

stroke = input('Введите слово: ')

stroke = stroke.upper()                                             # Повышаем регистр
for i in range(len(stroke)): stroke = stroke.replace(' ', '')       # Удаляем возможные пробелы. Фактически это никак не влияет на результат, 
print(stroke)                                                       # но увеличивает скорость обработки, создавая бесполезные циклы проверки

summ = 0                                                            # Переменная счетчик стоимости слова
#В данных вложеных циклах:
 # Внешний цикл проходит по строке-слову посимвольно
  # второй цикл проходит по словарю. Если флажок "опущен" значит цикл прерывается, исключая "пустые проходы"
    # третий цикл проходит по values словаря в поиске совпадений. Если совпадния найдены - флажок "опускается" и цикл прерывается

# введения флага и прерываний цикла позволило сократить время работы алгоритма с 'сиреневенькая глазовыколупывалка с полувыломанными ножками в сарае на острове хуаньчжоу верхом на леопарде в пустоши диккенса'
# c 0.028989852905273438s  до 0.013976097106933594s (значения среднего арифм. на 20 тестах)

for j in range(len(stroke)):
    flag = True
    for k,v in scrabble.items():
        for i in range(len(v)):
            if (stroke[j] == v[i]): 
                print(k,v[i])
                summ += k
                flag = False
                break
        if flag == False: break

print(f'Цена слова: {summ}')